# https://www.serverless.com/framework/docs/providers/aws/guide/variables/
# https://www.serverless.com/framework/docs/providers/aws/guide/resources/
# https://docs.aws.amazon.com/de_de/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html
# https://www.serverless.com/framework/docs/providers/aws/guide/iam/

service: LamDION-NodePackage

custom:
  eventBusName: lamdion-test-bus-${opt:stage, self:provider.stage}
  eventBus: arn:aws:events:eu-west-1:#{AWS::AccountId}:event-bus/${self:custom.eventBusName}

plugins:
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  memorySize: 128
  region: eu-west-1
  timeout: 10
  profile: nodeModuleProfile
  tags:
    dion:customer:title: DI-ON.solutions
    dion:customer:project: lamdion_development_${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "events:PutEvents"
      Resource: !GetAtt lamDIONEventBridge.Arn
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
      Resource: !GetAtt lamDIONEventStoreDDB.Arn
  environment:
    EVENT_BUS_NAME: !GetAtt lamDIONEventBridge.Name
    DDB_TABLE_NAME: !Ref lamDIONEventStoreDDB
    QUEUE_URL: !Ref lamDIONSQS
    SENTRY_DSN: "https://bd9fc5b8a3de44eba100b1fc5694aeb9@o394404.ingest.sentry.io/5431836"


package:
  exclude:
    - Lambda/node_modules/@types/**
    - Lambda/node_modules/.cache/**
    - Lambda/node_modules/.bin/**
    - Lambda/node_modules/typescript/**
    - Lambda/node_modules/@di-on.solutions/lamdion/node_modules/**
    - Lambda/node_modules/@di-on.solutions/lamdion/src/**
    - Lambda/node_modules/@di-on.solutions/lamdion/package.json
    - Lambda/node_modules/@di-on.solutions/lamdion/package-lock.json
    - Lambda/node_modules/@di-on.solutions/lamdion/README.md
    - Lambda/node_modules/@di-on.solutions/lamdion/tsconfig.json
    - Lambda/node_modules/@di-on.solutions/lamdion/config/**
    - Lambda/node_modules/@di-on.solutions/lamdion/bin/**
    - Lambda/node_modules/@di-on.solutions/lamdion/.*/**
    - Lambda/src/**
    - Lambda/tsconfig.json
    - Lambda/.npmignore
    - Lambda/package.json
    - Lambda/package-lock.json
    - package.json
    - package-lock.json
    - node_modules/**


functions:
  emitTitle:
    handler: Lambda/build/EmitTitle.handler
    events:
      - http:
          method: GET
          path: /eventbridge-emit
          payload: '2.0'

  emitComposer:
    handler: Lambda/build/EmitComposer.handler
    events:
      - eventBridge:
          eventBus: ${self:custom.eventBus}
          pattern:
            source:
              - "lambdion.emit.title"

  consumeTitle:
    handler: Lambda/build/ConsumeTitle.handler
    events:
      - eventBridge:
          eventBus: ${self:custom.eventBus}
          pattern:
            source:
              - "lambdion.emit.title"

  alreadyEmitted:
    handler: Lambda/build/AlreadyEmitted.handler
    events:
      - eventBridge:
          eventBus: ${self:custom.eventBus}
          pattern:
            source:
              - "lambdion.emit.title"

  eventStorePersist:
    handler: Lambda/build/EventStorePersist.handler
    events:
      - eventBridge:
          eventBus: ${self:custom.eventBus}
          pattern:
            source:
              - prefix: ""

  sqs-consume:
    handler: Lambda/build/SQSConsume.handler
    events:
      - sqs:
          arn: !GetAtt lamDIONSQS.Arn
          batchSize: 1


resources:
  Resources:
    lamDIONEventStoreDDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LamDION_EventStore
        AttributeDefinitions:
          - AttributeName: "EVENT_CORRELATION_ID"
            AttributeType: "S"
          - AttributeName: "EVENT_TIME"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "EVENT_CORRELATION_ID"
            KeyType: "HASH"
          - AttributeName: "EVENT_TIME"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST

    lamDIONEventBridge:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:custom.eventBusName}

    lamDIONEventBridgeSQSRule:
      Type: AWS::Events::Rule
      Properties:
        Description: "Test Event Bus for LamDION development"
        EventBusName: ${self:custom.eventBusName}
        EventPattern: { "source": [ "lambdion.emit.title" ]}
        Targets:
          - Arn: !GetAtt lamDIONSQS.Arn
            Id: !GetAtt lamDIONSQS.QueueName

    lamDIONSQS:
      Type: AWS::SQS::Queue

    lamDIONSQSPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref lamDIONSQS
        PolicyDocument:
          Statement:
            - Action:
                - "SQS:SendMessage"
              Effect: "Allow"
              Resource: !GetAtt lamDIONSQS.Arn
              Principal:
                Service:
                  - "events.amazonaws.com"
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt lamDIONEventBridgeSQSRule.Arn